// Generated by CoffeeScript 1.7.1

/*
 Paraxify.js - v0.1
 @author Jaime Caballero
 MIT license
 */
(function(document, window) {
  "use strict";
  var paraxify;
  paraxify = function(el, options) {
    var Paraxify, computed, i, opt, pho, posY, screenY;
    computed = !!window.getComputedStyle;
    if (!computed) {
      window.getComputedStyle = function(el) {
        this.el = el;
        this.getPropertyValue = function(prop) {
          var re;
          re = /(\-([a-z]){1})/g;
          if (prop === "float") {
            prop = "styleFloat";
          }
          if (re.test(prop)) {
            prop = prop.replace(re, function() {
              return arguments[2].toUpperCase();
            });
          }
          return el.currentStyle[prop];
        };
        return this;
      };
    }

	var addEvent = function (el, evt, fn, bubble) {
        if ("addEventListener" in el) {
          // BBOS6 doesn't support handleEvent, catch and polyfill
          try {
            el.addEventListener(evt, fn, bubble);
          } catch (e) {
            if (typeof fn === "object" && fn.handleEvent) {
              el.addEventListener(evt, function (e) {
                // Bind fn as this and set first arg as event object
                fn.handleEvent.call(fn, e);
              }, bubble);
            } else {
              throw e;
            }
          }
        } else if ("attachEvent" in el) {
          // check if the callback is an object and contains handleEvent
          if (typeof fn === "object" && fn.handleEvent) {
            el.attachEvent("on" + evt, function () {
              // Bind fn as this
              fn.handleEvent.call(fn);
            });
          } else {
            el.attachEvent("on" + evt, fn);
          }
        }
      };


    posY = 0;
    screenY = 0;
    i = 0;
    opt = {};
    pho = [];
    Paraxify = function(el, options) {
      var _i, _len;
      this.options = {
        invert: false,
        speed: 2.5
      };
      posY = 0;
      screenY = 0;
      i = 0;
      for (_i = 0, _len = this.options.length; _i < _len; _i++) {
        i = options[_i];
        this.options[i] = options[i];
      }
      if (document.getElementsByClassName(el.replace('.', ''))) {
        this.photos = document.getElementsByClassName(el.replace('.', ''));
      } else {
        throw new Error("The elements you're trying to select don't exist.");
      }
      opt = this.options;
      pho = this.photos;
      
      this._init(this);
    };
    Paraxify.prototype = {
      _init: function() {
        screenY = window.innerHeight;
        i = 0;
        while (i < pho.length) {
          pho[i].url = window.getComputedStyle(pho[i], false).backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2').split(',')[0];
          pho[i].img = new Image();
          this._check(i);
          pho[i].img.src = pho[i].url;
          i++;
        }

        addEvent(window, "onscroll", this._animate(), false);
        addEvent(window, "resize", this._update(), false);
      },
      _update: function() {
        screenY = window.innerHeight;
        i = 0;
        while (i < pho.length) {
          this._check(i);
          i++;
        }
      },
      _check: function(i) {
      	var main = pho[i];
      	pho[i].img.onload = function(){
	        if (this.height < main.offsetHeight) {
	          throw new Error("The img " + main.url +" (" + this.height + "px) is too short for that container (" + main.offsetHeight +"px).");
	        } else {
	          main.diff = -(this.height - main.offsetHeight);
	        }
	    }
	    if (opt.invert) {
			main.diff = -main.diff;
		}
      },
      _animate: function() {
        var per, position;
        posY = window.pageYOffset !== void 0 ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
        i = 0;
        while (i < pho.length) {
          if (pho[i].img.height > pho[i].offsetHeight && ((posY + screenY) > pho[i].offsetTop) && window.getComputedStyle(pho[i], false).backgroundAttachment === "fixed") {
            per = (posY - pho[i].offsetTop + screenY) * 100 / (pho[i].offsetHeight + screenY);
            if (per < 0) {
              per = 0;
            }
            if (per > 100) {
              per = 100;
            }
            position = Math.round(((pho[i].diff * opt.speed) * (per - 50) / 100) * 100) / 100;
            console.log(position);
          } else {
            position = "center";
          }
          pho[i].style.backgroundPosition = "center " + position + "px";
        i++;
        }
      }
    };
    return new Paraxify(el, options);
  };
  window.paraxify = paraxify;
})(document, window);