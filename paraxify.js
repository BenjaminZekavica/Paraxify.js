// Generated by CoffeeScript 1.7.1

/*
 Paraxify.js - v0.1
 @author Jaime Caballero
 MIT license
 */

(function() {
  (function(document, window, index) {
    "use strict";
    var paraxify;
    paraxify = function(el, options) {
      var Paraxify, computed, contador, i, opt, pho, posY, screenY;
      computed = !!window.getComputedStyle;
      if (!computed) {
        window.getComputedStyle = function(el) {
          this.el = el;
          this.getPropertyValue = function(prop) {
            var re;
            re = /(\-([a-z]){1})/g;
            if (prop === "float") {
              prop = "styleFloat";
            }
            if (re.test(prop)) {
              prop = prop.replace(re, function() {
                return arguments[2].toUpperCase();
              });
            }
            return el.currentStyle[prop];
          };
          return this;
        };
      }
      posY = 0;
      screenY = 0;
      i = 0;
      opt = {};
      pho = [];
      contador = 0;
      Paraxify = function(el, options) {
        this.options = {
          speed: 1
        };
        for (i in options) {
          this.options[i] = options[i];
        }
        if (this.options.speed < 0 || this.options.speed > 1) {
          this.options.speed = 1;
        }
        if (!el) {
          el = 'paraxify';
        }
        if (document.getElementsByClassName(el.replace('.', ''))) {
          this.photos = document.getElementsByClassName(el.replace('.', ''));
        } else if (document.querySelector(el) !== false) {
          this.photos = querySelector(el);
        } else {
          throw new Error("The elements you're trying to select don't exist.");
        }
        opt = this.options;
        pho = this.photos;
        this._init(this);
      };
      Paraxify.prototype = {
        _init: function() {
          screenY = window.innerHeight;
          i = 0;
          while (i < pho.length) {
            pho[i].url = window.getComputedStyle(pho[i], false).backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2').split(',')[0];
            pho[i].img = new Image();
            this._check(i);
            pho[i].img.src = pho[i].url;
            i++;
          }
          window.onscroll = (function() {
            this._animate();
          }).bind(this);
          window.resize = (function() {
            this.update();
          }).bind(this);
        },
        _update: function() {
          screenY = window.innerHeight;
          i = 0;
          while (i < pho.length) {
            this._check(i);
            i++;
          }
        },
        _check: function(i) {
          var main;
          main = pho[i];
          pho[i].img.onload = function() {
            if (this.height < main.offsetHeight) {
              throw new Error("The image " + main.url(+" (" + this.height + "px) is too short for that container (" + main.offsetHeight(+"px).")));
            } else {
              main.diff = -(this.height - main.offsetHeight);
            }
          };
        },
        _animate: function() {
          var per, position;
          if (window.pageYOffset !== void 0) {
            posY = window.pageYOffset;
          } else {
            posY = (document.documentElement || document.body.parentNode || document.body).scrollTop;
          }
          i = 0;
          while (i < pho.length) {
            if (pho[i].img.height > pho[i].offsetHeight && ((posY + screenY) > pho[i].offsetTop) && window.getComputedStyle(pho[i], false).backgroundAttachment === "fixed") {
              per = (posY - pho[i].offsetTop + screenY) * 100 / (pho[i].offsetHeight + screenY);
              if (per < 0) {
                per = 0;
              }
              if (per > 100) {
                per = 100;
              }
              position = Math.round(((pho[i].diff * opt.speed) * (per - 50) / 100) * 100) / 100;
            } else {
              position = "center";
            }
            pho[i].style.backgroundPosition = "center " + position + "px";
            i++;
          }
        }
      };
      return new Paraxify(el, options);
    };
    window.paraxify = paraxify;
  })(document, window, 0);

}).call(this);
